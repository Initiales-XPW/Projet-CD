# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"
  #config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 8080, host: 8880
  config.vm.network "forwarded_port", guest: 8001, host: 8001
  config.vm.network "forwarded_port", guest: 22, host: 2121


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.100.2"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  # Customize the amount of memory on the VM:
      vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
	#apt-get full-upgrade
    apt-get install -y openjdk-8-jdk git
    curl -s -LO https://www-us.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
    tar -xzf apache-maven-3.6.3-bin.tar.gz -C /opt/
    echo 'export MAVEN_HOME=/opt/apache-maven-3.6.3' > /etc/profile.d/mvn.sh
    echo 'export PATH=$PATH:$MAVEN_HOME/bin' >> /etc/profile.d/mvn.sh
    #curl -s -LO http://mirrors.jenkins.io/war-stable/latest/jenkins.war
    #mkdir -p /usr/lib/jenkins
    #mv jenkins.war /usr/lib/jenkins/jenkins.war
    mkdir /data/
    sudo useradd --system -md /data/jenkins jenkins
    #echo -e '[Unit]\nDescription=Jenkins Daemon\nAfter=network.target\n\n[Service]\nType=simple\nEnvironment="JENKINS_HOME=/data/jenkins"\nExecStart=/usr/bin/java -jar /usr/lib/jenkins/jenkins.war\nUser=jenkins\n\n[Install]\nWantedBy=multi-user.target' > /etc/systemd/system/jenkins.service
    #systemctl daemon-reload
    #systemctl start jenkins.service
    #systemctl status jenkins.service
    #systemctl enable jenkins.service
    #sudo su jenkins
    #sudo mv /vagrant_data/.ssh /data/jenkins/
    #sudo mkdir -p /data/jenkins/.ssh
    #exit
    #sudo cp /vagrant_data/.ssh/authorized_keys /data/jenkins/.ssh/
    #sudo cp -rf  /vagrant_data/.ssh /data/jenkins/
    #sudo cat /vagrant_data/.ssh/authorized_keys >> /data/jenkins/.ssh/authorized_keys
    #sudo mkdir /data/jenkins/.ssh
    #sudo echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8XEWrjtQsFQX0Ln1Ld7N/iuAkx/0v6Vh+HkHxfoYFxLx+AzdLiCTn4ffGodg3PriuiWWLn6Yn0IiEJnMpyIyImLucReGkk7wrLMtsYV5TnFuJOoFhky9u6sK+ne7q+p0jNDn6s7fH6CTZKDJFmlj3RiiCOdtsSOGxJzYTmJQJi9EK3F7PrtldTIAS5TkgS9mnFVVT+pwNyGibeIMd+i+It7sJu0N5embQjGfDJkNpFPJSk2UZ1Ei6TJygkpOu2YrdhAT+VILg2ezEoCSpYgm4AAYmvJT64VMogdM2QXz6zmiIbUzhBywG9bRyDpuCNP9clvCVVDFduTC2AWpeV6fQASug4RXNsfDr5mSVrvc0+GtGnH9Tb9Aee1DtFhylpMQeoJh0VrFlw+0OJnUES5Z+eFWBikNEzenP0XMF46GRvcOPw8BcX1oquxop8y63zcaXdWgFGFzwJ5rH5895dqPj3sz9iVDzzE5Bu95BD8QismXUtI8x16Oxvf56Vl8Q12XIHMqytdW/DnTsgyMrUvr7hATQMUd3xne8BWehaMganXc8Zjm2JLLufGOgMkV25TS5kD11xONePPKukc96UEMoDOf/xPT7XdavxoyE4l2HJtjm3tLvyEKkrQM1iUxLduL9l4cSmgcfcDrI18GINi92Lo3lvbc3wtH2YEcC45B9HQ== vagrant@ubuntu-bionic" >> /data/jenkins/.ssh/authorized_keys
    #sudo chown -R jenkins:jenkins /data/jenkins/.ssh
    #sudo sh /vagrant_data/Configuration.sh
  SHELL
end